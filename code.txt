
/Users/matiaskochman/dev/personal/tests/post_comments/.env

DB_HOST=localhost
DB_PORT=5555
DB_USER=my_user
DB_PASSWORD=my_password
DB_NAME=my_database


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/swagger.config.ts

// src/swagger.config.ts

const swaggerOptions = {
  openapi: "3.0.0",
  info: {
    title: "Post Comments API",
    version: "1.0.0",
    description: "API para gestionar posts y comentarios",
  },
  servers: [
    {
      url: "http://localhost:3000",
      description: "Servidor local",
    },
  ],
  components: {
    schemas: {
      Post: {
        type: "object",
        properties: {
          id: { type: "integer", description: "ID único del post" },
          title: { type: "string", description: "Título del post" },
          body: { type: "string", description: "Contenido del post" },
          image: {
            type: "string",
            nullable: true,
            description: "URL de la imagen del post",
          },
          userId: {
            type: "integer",
            description: "ID del usuario que creó el post",
          },
          comments: {
            type: "array",
            items: { $ref: "#/components/schemas/Comment" },
            description: "Lista de comentarios asociados al post",
          },
        },
        required: ["id", "title", "body", "userId"],
      },
      Comment: {
        type: "object",
        properties: {
          id: { type: "integer", description: "ID único del comentario" },
          body: { type: "string", description: "Contenido del comentario" },
          name: {
            type: "string",
            description: "Nombre del autor del comentario",
          },
          email: {
            type: "string",
            description: "Email del autor del comentario",
          },
          postId: {
            type: "integer",
            description: "ID del post al que pertenece el comentario",
          },
        },
        required: ["id", "body", "name", "email", "postId"],
      },
    },
  },
};

export default swaggerOptions;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/.vscode/launch.json

{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Debug TS App",
      "program": "${workspaceFolder}/src/index.ts",
      "runtimeArgs": ["--loader", "ts-node/esm"],
      "outFiles": ["${workspaceFolder}/dist/**/*.js"],
      "envFile": "${workspaceFolder}/.env",
      "console": "integratedTerminal",
      "preLaunchTask": "tsc: build - tsconfig.json"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Debug Tests",
      "program": "${workspaceFolder}/node_modules/jest/bin/jest.js",
      "args": ["--runInBand"],
      "env": {
        "NODE_ENV": "test",
        "DB_HOST": "localhost",
        "DB_PORT": "5555",
        "DB_USER": "my_user",
        "DB_PASSWORD": "my_password",
        "DB_NAME": "test_database"
      },
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/app.js

// src/app.ts
import express from "express";
import postRoutes from "./routes/post.routes";
import commentRoutes from "./routes/comment.routes";
import testRoutes from "./routes/test.routes"; // Importar la ruta de prueba
import swaggerUi from "swagger-ui-express";
import swaggerJsDoc from "swagger-jsdoc";
import swaggerOptions from "./swagger.config";
import { errorHandler } from "./middleware/errorHandler";
const app = express();
app.use(express.json());
// Configuración de Swagger
const swaggerSpec = swaggerJsDoc({
    definition: swaggerOptions,
    apis: ["src/routes/*.ts"],
});
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));
// Rutas de la API
app.use("/api/posts", postRoutes);
app.use("/api/comments", commentRoutes);
app.use("/api/test", testRoutes); // Usar la ruta de prueba
// Middleware de manejo de errores
app.use(errorHandler);
export default app;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/controllers/comment.controller.js

import { CommentService } from "../services/comment.service";
const commentService = new CommentService();
/**
 * Controlador para crear un comentario asociado a un post existente.
 */
export const createComment = async (req, res, next) => {
    try {
        const { body, name, email, postId } = req.body;
        const postIdNumber = Number(postId); // Conversion explícita a número
        const savedComment = await commentService.createComment({
            body,
            name,
            email,
            postId: postIdNumber,
        });
        res.status(201).json(savedComment);
    }
    catch (error) {
        next(error);
    }
};
/**
 * Controlador para mover un comentario de un post a otro.
 */
export const moveComment = async (req, res, next) => {
    try {
        const { commentId, newPostId } = req.body;
        const commentIdNumber = Number(commentId); // Conversion explícita a número
        const newPostIdNumber = Number(newPostId); // Conversion explícita a número
        const movedComment = await commentService.moveComment({
            commentId: commentIdNumber,
            newPostId: newPostIdNumber,
        });
        res.status(200).json({
            message: "Comentario movido exitosamente",
            comment: movedComment,
        });
    }
    catch (error) {
        next(error);
    }
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/controllers/post.controller.js

import { PostService } from "../services/post.service";
const postService = new PostService();
/**
 * Obtiene todos los posts con sus comentarios.
 */
export const getAllPosts = async (req, res, next) => {
    try {
        const posts = await postService.getAllPosts();
        res.json(posts);
    }
    catch (error) {
        next(error);
    }
};
/**
 * Crea un nuevo post.
 */
export const createPost = async (req, res, next) => {
    try {
        const { title, body, image, userId } = req.body;
        const savedPost = await postService.createPost({
            title,
            body,
            image,
            userId,
        });
        res.status(201).json(savedPost);
    }
    catch (error) {
        next(error);
    }
};
/**
 * Obtiene un post por su ID, incluyendo sus comentarios.
 */
export const getPostById = async (req, res, next) => {
    try {
        const { id } = req.params;
        const post = await postService.getPostById(Number(id));
        res.json(post);
    }
    catch (error) {
        next(error);
    }
};
/**
 * Obtiene todos los comentarios de un post específico.
 */
export const getCommentsByPostId = async (req, res, next) => {
    try {
        const { post_id } = req.params;
        const comments = await postService.getCommentsByPostId(Number(post_id));
        res.json(comments);
    }
    catch (error) {
        next(error);
    }
};
/**
 * Elimina lógicamente un post por su ID.
 */
export const softDeletePost = async (req, res, next) => {
    try {
        const { id } = req.params;
        await postService.deletePost(Number(id));
        res.status(200).json({ message: "Post eliminado correctamente" });
    }
    catch (error) {
        next(error);
    }
};
/**
 * Restaura un post eliminado lógicamente.
 */
export const restorePost = async (req, res, next) => {
    try {
        const { id } = req.params;
        await postService.restorePost(Number(id));
        res.status(200).json({ message: "Post restaurado correctamente" });
    }
    catch (error) {
        next(error);
    }
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/dtos/CreateCommentDTO.js

// src/dtos/CreateCommentDTO.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsInt, IsNotEmpty, IsString, IsEmail } from "class-validator";
export class CreateCommentDTO {
}
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], CreateCommentDTO.prototype, "body", void 0);
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], CreateCommentDTO.prototype, "name", void 0);
__decorate([
    IsEmail(),
    __metadata("design:type", String)
], CreateCommentDTO.prototype, "email", void 0);
__decorate([
    IsInt(),
    __metadata("design:type", Number)
], CreateCommentDTO.prototype, "postId", void 0);


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/dtos/CreatePostDTO.js

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// src/dtos/post.dtos.ts
import { IsString, IsNotEmpty, IsInt } from "class-validator";
export class CreatePostDTO {
}
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], CreatePostDTO.prototype, "title", void 0);
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], CreatePostDTO.prototype, "body", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], CreatePostDTO.prototype, "image", void 0);
__decorate([
    IsInt(),
    __metadata("design:type", Number)
], CreatePostDTO.prototype, "userId", void 0);


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/dtos/comment.dtos.js

export {};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/entities/Comment.js

// src/entities/Comment.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn, } from "typeorm";
import { Post } from "./Post";
let Comment = class Comment {
};
__decorate([
    PrimaryGeneratedColumn(),
    __metadata("design:type", Number)
], Comment.prototype, "id", void 0);
__decorate([
    Column({ type: "text" }),
    __metadata("design:type", String)
], Comment.prototype, "body", void 0);
__decorate([
    Column({ type: "varchar", length: 255 }),
    __metadata("design:type", String)
], Comment.prototype, "name", void 0);
__decorate([
    Column({ type: "varchar", length: 255 }),
    __metadata("design:type", String)
], Comment.prototype, "email", void 0);
__decorate([
    Column({ type: "int" }),
    __metadata("design:type", Number)
], Comment.prototype, "postId", void 0);
__decorate([
    ManyToOne(() => Post, (post) => post.comments, { onDelete: "CASCADE" }),
    JoinColumn({ name: "postId" }),
    __metadata("design:type", Post)
], Comment.prototype, "post", void 0);
Comment = __decorate([
    Entity()
], Comment);
export { Comment };


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/entities/Post.js

// src/entities/Post.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Entity, PrimaryGeneratedColumn, Column, OneToMany, DeleteDateColumn, } from "typeorm";
import { Comment } from "./Comment";
let Post = class Post {
};
__decorate([
    PrimaryGeneratedColumn(),
    __metadata("design:type", Number)
], Post.prototype, "id", void 0);
__decorate([
    Column({ type: "varchar" }),
    __metadata("design:type", String)
], Post.prototype, "title", void 0);
__decorate([
    Column({ type: "text", nullable: true }),
    __metadata("design:type", String)
], Post.prototype, "body", void 0);
__decorate([
    Column({ type: "varchar", nullable: true }),
    __metadata("design:type", String)
], Post.prototype, "image", void 0);
__decorate([
    Column({ type: "int" }),
    __metadata("design:type", Number)
], Post.prototype, "userId", void 0);
__decorate([
    OneToMany(() => Comment, (comment) => comment.post, { cascade: true }),
    __metadata("design:type", Array)
], Post.prototype, "comments", void 0);
__decorate([
    DeleteDateColumn(),
    __metadata("design:type", Object)
], Post.prototype, "deletedAt", void 0);
Post = __decorate([
    Entity()
], Post);
export { Post };


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/entities/index.js

// src/entities/index.ts
export * from "./Post";
export * from "./Comment";


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/index.js

import dotenv from "dotenv";
import "reflect-metadata"; // Importa reflect-metadata si estás usando TypeORM
import { dataSource } from "./ormconfig";
import app from "./app";
dotenv.config();
const PORT = 3000;
async function startServer() {
    try {
        await dataSource.initialize();
        console.log("Data Source has been initialized!");
        app.listen(PORT, () => {
            console.log(`Server is running on http://localhost:${PORT}`);
        });
    }
    catch (error) {
        console.error("Error during Data Source initialization:", error);
    }
}
startServer();


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/middleware/errorHandler.js

// src/middleware/errorHandler.ts
/**
 * Middleware de manejo de errores.
 * Captura cualquier error que ocurra en las rutas y envía una respuesta estandarizada.
 */
export const errorHandler = (err, req, res, next) => {
    console.error(err);
    const statusCode = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(statusCode).json({
        message,
    });
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/migrations/AddPostIdToComment.js

"use strict";
// import {
//   MigrationInterface,
//   QueryRunner,
//   TableColumn,
//   TableForeignKey,
// } from "typeorm";
// export class AddPostIdToComment1682579463000 implements MigrationInterface {
//   public async up(queryRunner: QueryRunner): Promise<void> {
//     // Añadir la columna postId a la tabla comment
//     await queryRunner.addColumn(
//       "comment",
//       new TableColumn({
//         name: "postId",
//         type: "int",
//         isNullable: false, // Ajusta según tus necesidades
//       })
//     );
//     // Crear la clave foránea hacia la tabla post
//     await queryRunner.createForeignKey(
//       "comment",
//       new TableForeignKey({
//         columnNames: ["postId"],
//         referencedColumnNames: ["id"],
//         referencedTableName: "post",
//         onDelete: "CASCADE", // Ajusta según tus necesidades
//       })
//     );
//   }
//   public async down(queryRunner: QueryRunner): Promise<void> {
//     // Obtener la tabla comment
//     const table = await queryRunner.getTable("comment");
//     if (!table) {
//       throw new Error("La tabla 'comment' no existe");
//     }
//     // Encontrar la clave foránea creada
//     const foreignKey = table.foreignKeys.find(
//       (fk) => fk.columnNames.indexOf("postId") !== -1
//     );
//     if (foreignKey) {
//       await queryRunner.dropForeignKey("comment", foreignKey);
//     }
//     // Eliminar la columna postId
//     await queryRunner.dropColumn("comment", "postId");
//   }
// }


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/ormconfig.js

// src/ormconfig.ts
import "reflect-metadata";
import { DataSource } from "typeorm";
import { Post } from "./entities/Post";
import { Comment } from "./entities/Comment";
import dotenv from "dotenv";
dotenv.config();
// Instancia para Desarrollo y Producción
const dataSource = new DataSource({
    type: "mysql",
    host: process.env.DB_HOST || "localhost",
    port: parseInt(process.env.DB_PORT || "3306"),
    username: process.env.DB_USER || "root",
    password: process.env.DB_PASSWORD || "password",
    database: process.env.DB_NAME || "my_database",
    synchronize: false, // Debe ser false para usar migraciones
    logging: false,
    entities: [Post, Comment],
    migrations: ["src/migrations/*.ts"],
    subscribers: [],
    // Añade tus repositorios personalizados
    // Nota: TypeORM 0.3.x no soporta la opción 'repositories' directamente
});
// Instancia para Pruebas
const testDataSource = new DataSource({
    type: "sqlite",
    database: ":memory:",
    dropSchema: true,
    entities: [Post, Comment],
    synchronize: true, // Sincronizar el esquema para pruebas
    logging: false,
    // Añade tus repositorios personalizados para pruebas
});
export { dataSource, testDataSource };


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/repositories/CommentRepository.js

// src/repositories/CommentRepository.ts
import { Repository } from "typeorm";
import { Comment } from "../entities/Comment";
export class CommentRepository extends Repository {
    constructor(manager) {
        super(Comment, manager);
    }
    /**
     * Encuentra todos los comentarios asociados a un post específico.
     * @param postId ID del post.
     * @returns Lista de comentarios.
     */
    async findCommentsByPostId(postId) {
        return this.find({ where: { postId }, relations: ["post"] });
    }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/repositories/PostRepository.js

// src/repositories/PostRepository.ts
import { Repository } from "typeorm";
import { Post } from "../entities/Post";
import { IsNull } from "typeorm";
export class PostRepository extends Repository {
    constructor(manager) {
        super(Post, manager);
    }
    /**
     * Encuentra todos los posts activos (no eliminados) con sus comentarios.
     * @returns Lista de posts activos.
     */
    async findActivePosts() {
        return this.find({
            where: { deletedAt: IsNull() },
            relations: ["comments"],
        });
    }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/routes/comment.routes.js

// src/routes/comment.routes.ts
import { Router } from "express";
import { createComment, moveComment } from "../controllers/comment.controller";
const router = Router();
/**
 * @swagger
 * /api/comments:
 *   post:
 *     summary: Crea un nuevo comentario
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               body:
 *                 type: string
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *               postId:
 *                 type: integer
 *             required:
 *               - body
 *               - name
 *               - email
 *               - postId
 *     responses:
 *       201:
 *         description: Comentario creado
 *       400:
 *         description: Faltan campos obligatorios
 *       404:
 *         description: Post no encontrado o eliminado
 *       500:
 *         description: Error interno del servidor
 */
router.post("/", createComment);
/**
 * @swagger
 * /api/comments/move:
 *   put:
 *     summary: Mueve un comentario de un post a otro
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               commentId:
 *                 type: integer
 *                 description: ID del comentario a mover
 *               newPostId:
 *                 type: integer
 *                 description: ID del nuevo post al que se moverá el comentario
 *             required:
 *               - commentId
 *               - newPostId
 *     responses:
 *       200:
 *         description: Comentario movido exitosamente
 *       400:
 *         description: IDs inválidos
 *       404:
 *         description: Comentario o nuevo post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.put("/move", moveComment);
export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/routes/post.routes.js

// src/routes/post.routes.ts
import { Router } from "express";
import { getAllPosts, createPost, getPostById, getCommentsByPostId, softDeletePost, restorePost, } from "../controllers/post.controller";
const router = Router();
/**
 * @swagger
 * /api/posts:
 *   get:
 *     summary: Obtiene todos los posts
 *     responses:
 *       200:
 *         description: Lista de posts
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: "#/components/schemas/Post"
 */
router.get("/", getAllPosts);
/**
 * @swagger
 * /api/posts:
 *   post:
 *     summary: Crea un nuevo post
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               body:
 *                 type: string
 *               image:
 *                 type: string
 *               userId:
 *                 type: integer
 *             required:
 *               - title
 *               - body
 *               - userId
 *     responses:
 *       201:
 *         description: Post creado
 *       400:
 *         description: Faltan campos obligatorios
 *       500:
 *         description: Error interno del servidor
 */
router.post("/", createPost);
/**
 * @swagger
 * /api/posts/{id}:
 *   get:
 *     summary: Obtiene un post por ID
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: "#/components/schemas/Post"
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.get("/:id", getPostById);
/**
 * @swagger
 * /api/posts/{post_id}/comments:
 *   get:
 *     summary: Obtiene todos los comentarios de un post específico
 *     parameters:
 *       - name: post_id
 *         in: path
 *         required: true
 *         description: ID del post para obtener sus comentarios
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Lista de comentarios del post
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: "#/components/schemas/Comment"
 *       400:
 *         description: ID de post inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.get("/:post_id/comments", getCommentsByPostId);
/**
 * @swagger
 * /api/posts/{id}:
 *   delete:
 *     summary: Elimina lógicamente un post por su ID
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post eliminado correctamente
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.delete("/:id", softDeletePost);
/**
 * @swagger
 * /api/posts/{id}/restore:
 *   patch:
 *     summary: Restaura un post eliminado lógicamente
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post restaurado correctamente
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado o no está eliminado
 *       500:
 *         description: Error interno del servidor
 */
router.patch("/:id/restore", restorePost);
export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/routes/test.routes.js

// src/routes/test.routes.ts
import { Router } from "express";
const router = Router();
/**
 * Ruta de prueba para generar un error.
 */
router.get("/error", (req, res) => {
    throw new Error("This is a test error.");
});
export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/services/comment.service.js

// src/services/comment.service.ts
import { CommentRepository } from "../repositories/CommentRepository";
import { PostRepository } from "../repositories/PostRepository";
import { dataSource, testDataSource } from "../ormconfig";
export class CommentService {
    constructor() {
        const isTest = process.env.NODE_ENV === "test";
        const manager = isTest ? testDataSource.manager : dataSource.manager;
        this.commentRepository = new CommentRepository(manager);
        this.postRepository = new PostRepository(manager);
    }
    /**
     * Crear un nuevo comentario.
     */
    async createComment(data) {
        const { body, name, email, postId } = data;
        if (!body || !name || !email || !postId) {
            throw { status: 400, message: "Faltan campos obligatorios" };
        }
        const postIdNumber = Number(postId);
        if (isNaN(postIdNumber)) {
            throw { status: 400, message: "ID de post inválido" };
        }
        // Verificar que el post existe y no está eliminado
        const post = await this.postRepository.findOne({
            where: { id: postIdNumber },
        });
        if (!post || post.deletedAt) {
            throw { status: 404, message: "Post no encontrado o eliminado" };
        }
        const comment = this.commentRepository.create({
            body,
            name,
            email,
            postId: postIdNumber,
        });
        await this.commentRepository.save(comment);
        return comment;
    }
    /**
     * Mover un comentario a otro post.
     */
    async moveComment(data) {
        const { commentId, newPostId } = data;
        const commentIdNumber = Number(commentId);
        const newPostIdNumber = Number(newPostId);
        if (isNaN(commentIdNumber) || isNaN(newPostIdNumber)) {
            throw { status: 400, message: "IDs inválidos" };
        }
        // Verificar que el comentario existe
        const comment = await this.commentRepository.findOne({
            where: { id: commentIdNumber },
        });
        if (!comment) {
            throw { status: 404, message: "Comentario no encontrado" };
        }
        // Verificar que el nuevo post existe y no está eliminado
        const newPost = await this.postRepository.findOne({
            where: { id: newPostIdNumber },
        });
        if (!newPost || newPost.deletedAt) {
            throw { status: 404, message: "Nuevo post no encontrado o eliminado" };
        }
        // Actualizar el postId del comentario
        comment.postId = newPostIdNumber;
        await this.commentRepository.save(comment);
        return comment;
    }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/services/index.js

// src/services/index.ts
import { CommentService } from "./comment.service";
import { PostService } from "./post.service";
export const commentService = new CommentService();
export const postService = new PostService();


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/services/post.service.js

// src/services/post.service.ts
import { PostRepository } from "../repositories/PostRepository";
import { CommentRepository } from "../repositories/CommentRepository";
import { dataSource, testDataSource } from "../ormconfig";
export class PostService {
    constructor() {
        const isTest = process.env.NODE_ENV === "test";
        const manager = isTest ? testDataSource.manager : dataSource.manager;
        this.postRepository = new PostRepository(manager);
        this.commentRepository = new CommentRepository(manager);
    }
    /**
     * Crear un nuevo post
     * @param data Datos para crear el post
     * @returns El post creado
     */
    async createPost(data) {
        const { title, body, image, userId } = data;
        if (!title || !body || !userId) {
            throw { status: 400, message: "Faltan campos obligatorios" };
        }
        const post = this.postRepository.create({
            title,
            body,
            image,
            userId,
        });
        await this.postRepository.save(post);
        return post;
    }
    /**
     * Obtener todos los posts activos con sus comentarios.
     * @returns Lista de posts activos.
     */
    async getAllPosts() {
        return this.postRepository.findActivePosts();
    }
    /**
     * Obtener un post por su ID
     * @param id ID del post
     * @returns El post encontrado
     */
    async getPostById(id) {
        if (isNaN(id)) {
            throw { status: 400, message: "ID inválido" };
        }
        const post = await this.postRepository.findOne({
            where: { id },
            relations: ["comments"],
        });
        if (!post || post.deletedAt) {
            throw { status: 404, message: "Post no encontrado" };
        }
        return post;
    }
    /**
     * Obtener comentarios de un post específico por su ID
     * @param postId ID del post
     * @returns Lista de comentarios
     */
    async getCommentsByPostId(postId) {
        if (isNaN(postId)) {
            throw { status: 400, message: "ID de post inválido" };
        }
        return this.commentRepository.findCommentsByPostId(postId);
    }
    /**
     * Soft delete de un post
     * @param id ID del post
     */
    async deletePost(id) {
        if (isNaN(id)) {
            throw { status: 400, message: "ID inválido" };
        }
        const post = await this.postRepository.findOne({
            where: { id },
        });
        if (!post || post.deletedAt) {
            throw { status: 404, message: "Post no encontrado" };
        }
        await this.postRepository.softDelete(id);
    }
    /**
     * Restaurar un post eliminado lógicamente
     * @param id ID del post
     */
    async restorePost(id) {
        if (isNaN(id)) {
            throw { status: 400, message: "ID inválido" };
        }
        const post = await this.postRepository.findOne({
            where: { id },
            withDeleted: true,
        });
        if (!post || !post.deletedAt) {
            throw { status: 404, message: "Post no encontrado o no está eliminado" };
        }
        await this.postRepository.restore(id);
    }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/dist/swagger.config.js

// src/swagger.config.ts
const swaggerOptions = {
    openapi: "3.0.0",
    info: {
        title: "Post Comments API",
        version: "1.0.0",
        description: "API para gestionar posts y comentarios",
    },
    servers: [
        {
            url: "http://localhost:3000",
            description: "Servidor local",
        },
    ],
    components: {
        schemas: {
            Post: {
                type: "object",
                properties: {
                    id: { type: "integer", description: "ID único del post" },
                    title: { type: "string", description: "Título del post" },
                    body: { type: "string", description: "Contenido del post" },
                    image: {
                        type: "string",
                        nullable: true,
                        description: "URL de la imagen del post",
                    },
                    userId: {
                        type: "integer",
                        description: "ID del usuario que creó el post",
                    },
                    comments: {
                        type: "array",
                        items: { $ref: "#/components/schemas/Comment" },
                        description: "Lista de comentarios asociados al post",
                    },
                },
                required: ["id", "title", "body", "userId"],
            },
            Comment: {
                type: "object",
                properties: {
                    id: { type: "integer", description: "ID único del comentario" },
                    body: { type: "string", description: "Contenido del comentario" },
                    name: {
                        type: "string",
                        description: "Nombre del autor del comentario",
                    },
                    email: {
                        type: "string",
                        description: "Email del autor del comentario",
                    },
                    postId: {
                        type: "integer",
                        description: "ID del post al que pertenece el comentario",
                    },
                },
                required: ["id", "body", "name", "email", "postId"],
            },
        },
    },
};
export default swaggerOptions;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/app.ts

// src/app.ts

import express from "express";
import postRoutes from "./routes/post.routes";
import commentRoutes from "./routes/comment.routes";
import testRoutes from "./routes/test.routes"; // Importar la ruta de prueba
import swaggerUi from "swagger-ui-express";
import swaggerJsDoc from "swagger-jsdoc";
import swaggerOptions from "./swagger.config";
import { errorHandler } from "./middleware/errorHandler";

const app = express();

app.use(express.json());

// Configuración de Swagger
const swaggerSpec = swaggerJsDoc({
  definition: swaggerOptions,
  apis: ["src/routes/*.ts"],
});
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Rutas de la API
app.use("/api/posts", postRoutes);
app.use("/api/comments", commentRoutes);
app.use("/api/test", testRoutes); // Usar la ruta de prueba

// Middleware de manejo de errores
app.use(errorHandler);

export default app;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/controllers/comment.controller.ts

// src/controllers/comment.controller.ts
import { Request, Response, NextFunction } from "express";
import { CommentService } from "../services/comment.service";
import { CommentCreateDTO, CommentMoveDTO } from "../dtos/comment.dtos";
import { Comment } from "../entities/Comment";

const commentService: CommentService = new CommentService();

/**
 * Controlador para crear un comentario asociado a un post existente.
 */
export const createComment = async (
  req: Request<unknown, unknown, CommentCreateDTO>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { body, name, email, postId }: CommentCreateDTO = req.body;

    const postIdNumber: number = Number(postId); // Conversion explícita a número

    const savedComment: Comment = await commentService.createComment({
      body,
      name,
      email,
      postId: postIdNumber,
    });

    res.status(201).json(savedComment);
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Controlador para mover un comentario de un post a otro.
 */
export const moveComment = async (
  req: Request<unknown, unknown, CommentMoveDTO>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { commentId, newPostId }: CommentMoveDTO = req.body;

    const commentIdNumber: number = Number(commentId); // Conversion explícita a número
    const newPostIdNumber: number = Number(newPostId); // Conversion explícita a número

    const movedComment: Comment = await commentService.moveComment({
      commentId: commentIdNumber,
      newPostId: newPostIdNumber,
    });

    res.status(200).json({
      message: "Comentario movido exitosamente",
      comment: movedComment,
    });
  } catch (error: unknown) {
    next(error);
  }
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/controllers/post.controller.ts

// src/controllers/post.controller.ts
import { Request, Response, NextFunction } from "express";
import { PostService } from "../services/post.service";
import { Post } from "../entities/Post";
import { Comment } from "../entities/Comment";
import { CreatePostDTO } from "../dtos/CreatePostDTO";

const postService: PostService = new PostService();

/**
 * Obtiene todos los posts con sus comentarios.
 */
export const getAllPosts = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const posts: Post[] = await postService.getAllPosts();
    res.json(posts);
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Crea un nuevo post.
 */
export const createPost = async (
  req: Request<unknown, unknown, CreatePostDTO>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { title, body, image, userId }: CreatePostDTO = req.body;

    const savedPost: Post = await postService.createPost({
      title,
      body,
      image,
      userId,
    });

    res.status(201).json(savedPost);
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Obtiene un post por su ID, incluyendo sus comentarios.
 */
export const getPostById = async (
  req: Request<{ id: string }>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { id }: { id: string } = req.params;

    const post: Post | null = await postService.getPostById(Number(id));

    res.json(post);
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Obtiene todos los comentarios de un post específico.
 */
export const getCommentsByPostId = async (
  req: Request<{ post_id: string }>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { post_id }: { post_id: string } = req.params;

    const comments: Comment[] = await postService.getCommentsByPostId(
      Number(post_id)
    );

    res.json(comments);
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Elimina lógicamente un post por su ID.
 */
export const softDeletePost = async (
  req: Request<{ id: string }>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { id }: { id: string } = req.params;

    await postService.deletePost(Number(id));

    res.status(200).json({ message: "Post eliminado correctamente" });
  } catch (error: unknown) {
    next(error);
  }
};

/**
 * Restaura un post eliminado lógicamente.
 */
export const restorePost = async (
  req: Request<{ id: string }>,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const { id }: { id: string } = req.params;

    await postService.restorePost(Number(id));

    res.status(200).json({ message: "Post restaurado correctamente" });
  } catch (error: unknown) {
    next(error);
  }
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/dtos/CreateCommentDTO.ts

// src/dtos/CreateCommentDTO.ts

import { IsInt, IsNotEmpty, IsString, IsEmail } from "class-validator";

export class CreateCommentDTO {
  @IsString()
  @IsNotEmpty()
  body!: string;

  @IsString()
  @IsNotEmpty()
  name!: string;

  @IsEmail()
  email!: string;

  @IsInt()
  postId!: number;
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/dtos/CreatePostDTO.ts

// src/dtos/post.dtos.ts
import { IsString, IsNotEmpty, IsInt } from "class-validator";

export class CreatePostDTO {
  @IsString()
  @IsNotEmpty()
  title!: string;

  @IsString()
  @IsNotEmpty()
  body!: string;

  @IsString()
  image!: string;

  @IsInt()
  userId!: number;
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/dtos/comment.dtos.ts

// src/dtos/comment.dtos.ts
export interface CommentCreateDTO {
  body: string;
  name: string;
  email: string;
  postId: number; // Cambiado a number
}

export interface CommentMoveDTO {
  commentId: number; // Cambiado a number
  newPostId: number; // Cambiado a number
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/entities/Comment.ts

// src/entities/Comment.ts

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinColumn,
} from "typeorm";
import { Post } from "./Post";

@Entity()
export class Comment {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column({ type: "text" })
  body!: string;

  @Column({ type: "varchar", length: 255 })
  name!: string;

  @Column({ type: "varchar", length: 255 })
  email!: string;

  @Column({ type: "int" })
  postId!: number;

  @ManyToOne(() => Post, (post) => post.comments, { onDelete: "CASCADE" })
  @JoinColumn({ name: "postId" })
  post!: Post;
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/entities/Post.ts

// src/entities/Post.ts

import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  OneToMany,
  DeleteDateColumn,
} from "typeorm";
import { Comment } from "./Comment";

@Entity()
export class Post {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column({ type: "varchar" })
  title!: string;

  @Column({ type: "text", nullable: true })
  body?: string;

  @Column({ type: "varchar", nullable: true })
  image?: string;

  @Column({ type: "int" })
  userId!: number;

  @OneToMany(() => Comment, (comment) => comment.post, { cascade: true })
  comments!: Comment[];

  @DeleteDateColumn()
  deletedAt?: Date | null; // Maneja soft delete automáticamente
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/entities/index.ts

// src/entities/index.ts
export * from "./Post";
export * from "./Comment";


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/index.ts

import dotenv from "dotenv";
import "reflect-metadata"; // Importa reflect-metadata si estás usando TypeORM
import { dataSource } from "./ormconfig";
import app from "./app";

dotenv.config();

const PORT = 3000;

async function startServer() {
  try {
    await dataSource.initialize();
    console.log("Data Source has been initialized!");

    app.listen(PORT, () => {
      console.log(`Server is running on http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error("Error during Data Source initialization:", error);
  }
}

startServer();


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/middleware/errorHandler.ts

// src/middleware/errorHandler.ts

import { Request, Response, NextFunction } from "express";

/**
 * Middleware de manejo de errores.
 * Captura cualquier error que ocurra en las rutas y envía una respuesta estandarizada.
 */
export const errorHandler = (
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.error(err);

  const statusCode = err.status || err.statusCode || 500;
  const message = err.message || "Internal Server Error";

  res.status(statusCode).json({
    message,
  });
};


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/migrations/AddPostIdToComment.ts

// import {
//   MigrationInterface,
//   QueryRunner,
//   TableColumn,
//   TableForeignKey,
// } from "typeorm";

// export class AddPostIdToComment1682579463000 implements MigrationInterface {
//   public async up(queryRunner: QueryRunner): Promise<void> {
//     // Añadir la columna postId a la tabla comment
//     await queryRunner.addColumn(
//       "comment",
//       new TableColumn({
//         name: "postId",
//         type: "int",
//         isNullable: false, // Ajusta según tus necesidades
//       })
//     );

//     // Crear la clave foránea hacia la tabla post
//     await queryRunner.createForeignKey(
//       "comment",
//       new TableForeignKey({
//         columnNames: ["postId"],
//         referencedColumnNames: ["id"],
//         referencedTableName: "post",
//         onDelete: "CASCADE", // Ajusta según tus necesidades
//       })
//     );
//   }

//   public async down(queryRunner: QueryRunner): Promise<void> {
//     // Obtener la tabla comment
//     const table = await queryRunner.getTable("comment");
//     if (!table) {
//       throw new Error("La tabla 'comment' no existe");
//     }

//     // Encontrar la clave foránea creada
//     const foreignKey = table.foreignKeys.find(
//       (fk) => fk.columnNames.indexOf("postId") !== -1
//     );
//     if (foreignKey) {
//       await queryRunner.dropForeignKey("comment", foreignKey);
//     }

//     // Eliminar la columna postId
//     await queryRunner.dropColumn("comment", "postId");
//   }
// }


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/ormconfig.ts

// src/ormconfig.ts
import "reflect-metadata";

import { DataSource } from "typeorm";
import { Post } from "./entities/Post";
import { Comment } from "./entities/Comment";
import dotenv from "dotenv";
import { PostRepository } from "./repositories/PostRepository";
import { CommentRepository } from "./repositories/CommentRepository";

dotenv.config();

// Instancia para Desarrollo y Producción
const dataSource = new DataSource({
  type: "mysql",
  host: process.env.DB_HOST || "localhost",
  port: parseInt(process.env.DB_PORT || "3306"),
  username: process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || "password",
  database: process.env.DB_NAME || "my_database",
  synchronize: false, // Debe ser false para usar migraciones
  logging: false,
  entities: [Post, Comment],
  migrations: ["src/migrations/*.ts"],
  subscribers: [],
  // Añade tus repositorios personalizados
  // Nota: TypeORM 0.3.x no soporta la opción 'repositories' directamente
});

// Instancia para Pruebas
const testDataSource = new DataSource({
  type: "sqlite",
  database: ":memory:",
  dropSchema: true,
  entities: [Post, Comment],
  synchronize: true, // Sincronizar el esquema para pruebas
  logging: false,
  // Añade tus repositorios personalizados para pruebas
});

export { dataSource, testDataSource };


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/repositories/CommentRepository.ts

// src/repositories/CommentRepository.ts

import { Repository, EntityManager } from "typeorm";
import { Comment } from "../entities/Comment";

export class CommentRepository extends Repository<Comment> {
  constructor(manager: EntityManager) {
    super(Comment, manager);
  }

  /**
   * Encuentra todos los comentarios asociados a un post específico.
   * @param postId ID del post.
   * @returns Lista de comentarios.
   */
  async findCommentsByPostId(postId: number): Promise<Comment[]> {
    return this.find({ where: { postId }, relations: ["post"] });
  }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/repositories/PostRepository.ts

// src/repositories/PostRepository.ts

import { Repository, EntityManager } from "typeorm";
import { Post } from "../entities/Post";
import { IsNull } from "typeorm";
export class PostRepository extends Repository<Post> {
  constructor(manager: EntityManager) {
    super(Post, manager);
  }

  /**
   * Encuentra todos los posts activos (no eliminados) con sus comentarios.
   * @returns Lista de posts activos.
   */
  async findActivePosts(): Promise<Post[]> {
    return this.find({
      where: { deletedAt: IsNull() },
      relations: ["comments"],
    });
  }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/routes/comment.routes.ts

// src/routes/comment.routes.ts

import { Router } from "express";
import { createComment, moveComment } from "../controllers/comment.controller";

const router = Router();

/**
 * @swagger
 * /api/comments:
 *   post:
 *     summary: Crea un nuevo comentario
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               body:
 *                 type: string
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *               postId:
 *                 type: integer
 *             required:
 *               - body
 *               - name
 *               - email
 *               - postId
 *     responses:
 *       201:
 *         description: Comentario creado
 *       400:
 *         description: Faltan campos obligatorios
 *       404:
 *         description: Post no encontrado o eliminado
 *       500:
 *         description: Error interno del servidor
 */
router.post("/", createComment);

/**
 * @swagger
 * /api/comments/move:
 *   put:
 *     summary: Mueve un comentario de un post a otro
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               commentId:
 *                 type: integer
 *                 description: ID del comentario a mover
 *               newPostId:
 *                 type: integer
 *                 description: ID del nuevo post al que se moverá el comentario
 *             required:
 *               - commentId
 *               - newPostId
 *     responses:
 *       200:
 *         description: Comentario movido exitosamente
 *       400:
 *         description: IDs inválidos
 *       404:
 *         description: Comentario o nuevo post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.put("/move", moveComment);

export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/routes/post.routes.ts

// src/routes/post.routes.ts

import { Router } from "express";
import {
  getAllPosts,
  createPost,
  getPostById,
  getCommentsByPostId,
  softDeletePost,
  restorePost,
} from "../controllers/post.controller";

const router = Router();

/**
 * @swagger
 * /api/posts:
 *   get:
 *     summary: Obtiene todos los posts
 *     responses:
 *       200:
 *         description: Lista de posts
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: "#/components/schemas/Post"
 */
router.get("/", getAllPosts);

/**
 * @swagger
 * /api/posts:
 *   post:
 *     summary: Crea un nuevo post
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               body:
 *                 type: string
 *               image:
 *                 type: string
 *               userId:
 *                 type: integer
 *             required:
 *               - title
 *               - body
 *               - userId
 *     responses:
 *       201:
 *         description: Post creado
 *       400:
 *         description: Faltan campos obligatorios
 *       500:
 *         description: Error interno del servidor
 */
router.post("/", createPost);

/**
 * @swagger
 * /api/posts/{id}:
 *   get:
 *     summary: Obtiene un post por ID
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: "#/components/schemas/Post"
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.get("/:id", getPostById);

/**
 * @swagger
 * /api/posts/{post_id}/comments:
 *   get:
 *     summary: Obtiene todos los comentarios de un post específico
 *     parameters:
 *       - name: post_id
 *         in: path
 *         required: true
 *         description: ID del post para obtener sus comentarios
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Lista de comentarios del post
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: "#/components/schemas/Comment"
 *       400:
 *         description: ID de post inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.get("/:post_id/comments", getCommentsByPostId);

/**
 * @swagger
 * /api/posts/{id}:
 *   delete:
 *     summary: Elimina lógicamente un post por su ID
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post eliminado correctamente
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado
 *       500:
 *         description: Error interno del servidor
 */
router.delete("/:id", softDeletePost);

/**
 * @swagger
 * /api/posts/{id}/restore:
 *   patch:
 *     summary: Restaura un post eliminado lógicamente
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Post restaurado correctamente
 *       400:
 *         description: ID inválido
 *       404:
 *         description: Post no encontrado o no está eliminado
 *       500:
 *         description: Error interno del servidor
 */
router.patch("/:id/restore", restorePost);

export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/routes/test.routes.ts

// src/routes/test.routes.ts

import { Router, Request, Response } from "express";

const router = Router();

/**
 * Ruta de prueba para generar un error.
 */
router.get("/error", (req: Request, res: Response) => {
  throw new Error("This is a test error.");
});

export default router;


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/services/comment.service.ts

// src/services/comment.service.ts

import { Comment } from "../entities/Comment";
import { CommentRepository } from "../repositories/CommentRepository";
import { PostRepository } from "../repositories/PostRepository";
import { dataSource, testDataSource } from "../ormconfig";
import { CommentCreateDTO, CommentMoveDTO } from "../dtos/comment.dtos";

export class CommentService {
  private commentRepository: CommentRepository;
  private postRepository: PostRepository;

  constructor() {
    const isTest: boolean = process.env.NODE_ENV === "test";
    const manager = isTest ? testDataSource.manager : dataSource.manager;

    this.commentRepository = new CommentRepository(manager);
    this.postRepository = new PostRepository(manager);
  }

  /**
   * Crear un nuevo comentario.
   */
  async createComment(data: CommentCreateDTO): Promise<Comment> {
    const { body, name, email, postId }: CommentCreateDTO = data;

    if (!body || !name || !email || !postId) {
      throw { status: 400, message: "Faltan campos obligatorios" };
    }

    const postIdNumber: number = Number(postId);
    if (isNaN(postIdNumber)) {
      throw { status: 400, message: "ID de post inválido" };
    }

    // Verificar que el post existe y no está eliminado
    const post = await this.postRepository.findOne({
      where: { id: postIdNumber },
    });

    if (!post || post.deletedAt) {
      throw { status: 404, message: "Post no encontrado o eliminado" };
    }

    const comment: Comment = this.commentRepository.create({
      body,
      name,
      email,
      postId: postIdNumber,
    });

    await this.commentRepository.save(comment);
    return comment;
  }

  /**
   * Mover un comentario a otro post.
   */
  async moveComment(data: CommentMoveDTO): Promise<Comment> {
    const { commentId, newPostId }: CommentMoveDTO = data;

    const commentIdNumber: number = Number(commentId);
    const newPostIdNumber: number = Number(newPostId);

    if (isNaN(commentIdNumber) || isNaN(newPostIdNumber)) {
      throw { status: 400, message: "IDs inválidos" };
    }

    // Verificar que el comentario existe
    const comment: Comment | null = await this.commentRepository.findOne({
      where: { id: commentIdNumber },
    });

    if (!comment) {
      throw { status: 404, message: "Comentario no encontrado" };
    }

    // Verificar que el nuevo post existe y no está eliminado
    const newPost = await this.postRepository.findOne({
      where: { id: newPostIdNumber },
    });

    if (!newPost || newPost.deletedAt) {
      throw { status: 404, message: "Nuevo post no encontrado o eliminado" };
    }

    // Actualizar el postId del comentario
    comment.postId = newPostIdNumber;

    await this.commentRepository.save(comment);
    return comment;
  }
}


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/services/index.ts

// src/services/index.ts

import { CommentService } from "./comment.service";
import { PostService } from "./post.service";

export const commentService = new CommentService();
export const postService = new PostService();


/********************/


/Users/matiaskochman/dev/personal/tests/post_comments/src/services/post.service.ts

// src/services/post.service.ts

import { Post } from "../entities/Post";
import { PostRepository } from "../repositories/PostRepository";
import { CommentRepository } from "../repositories/CommentRepository";
import { dataSource, testDataSource } from "../ormconfig";
import { CreatePostDTO } from "../dtos/CreatePostDTO";
import { Comment } from "../entities/Comment";

export class PostService {
  private postRepository: PostRepository;
  private commentRepository: CommentRepository;

  constructor() {
    const isTest: boolean = process.env.NODE_ENV === "test";
    const manager = isTest ? testDataSource.manager : dataSource.manager;

    this.postRepository = new PostRepository(manager);
    this.commentRepository = new CommentRepository(manager);
  }

  /**
   * Crear un nuevo post
   * @param data Datos para crear el post
   * @returns El post creado
   */
  async createPost(data: CreatePostDTO): Promise<Post> {
    const { title, body, image, userId }: CreatePostDTO = data;

    if (!title || !body || !userId) {
      throw { status: 400, message: "Faltan campos obligatorios" };
    }

    const post: Post = this.postRepository.create({
      title,
      body,
      image,
      userId,
    });
    await this.postRepository.save(post);
    return post;
  }

  /**
   * Obtener todos los posts activos con sus comentarios.
   * @returns Lista de posts activos.
   */
  async getAllPosts(): Promise<Post[]> {
    return this.postRepository.findActivePosts();
  }

  /**
   * Obtener un post por su ID
   * @param id ID del post
   * @returns El post encontrado
   */
  async getPostById(id: number): Promise<Post> {
    if (isNaN(id)) {
      throw { status: 400, message: "ID inválido" };
    }

    const post: Post | null = await this.postRepository.findOne({
      where: { id },
      relations: ["comments"],
    });

    if (!post || post.deletedAt) {
      throw { status: 404, message: "Post no encontrado" };
    }

    return post;
  }

  /**
   * Obtener comentarios de un post específico por su ID
   * @param postId ID del post
   * @returns Lista de comentarios
   */
  async getCommentsByPostId(postId: number): Promise<Comment[]> {
    if (isNaN(postId)) {
      throw { status: 400, message: "ID de post inválido" };
    }

    return this.commentRepository.findCommentsByPostId(postId);
  }

  /**
   * Soft delete de un post
   * @param id ID del post
   */
  async deletePost(id: number): Promise<void> {
    if (isNaN(id)) {
      throw { status: 400, message: "ID inválido" };
    }

    const post: Post | null = await this.postRepository.findOne({
      where: { id },
    });

    if (!post || post.deletedAt) {
      throw { status: 404, message: "Post no encontrado" };
    }

    await this.postRepository.softDelete(id);
  }

  /**
   * Restaurar un post eliminado lógicamente
   * @param id ID del post
   */
  async restorePost(id: number): Promise<void> {
    if (isNaN(id)) {
      throw { status: 400, message: "ID inválido" };
    }

    const post: Post | null = await this.postRepository.findOne({
      where: { id },
      withDeleted: true,
    });

    if (!post || !post.deletedAt) {
      throw { status: 404, message: "Post no encontrado o no está eliminado" };
    }

    await this.postRepository.restore(id);
  }
}


/********************/

